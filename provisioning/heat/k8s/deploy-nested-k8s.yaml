# NESTED OPENSTACK/KUBERNETES

# Author: SAVITHRU LOKANATH
# Contact: SAVITHRU AT JUNIPER.NET
# Copyright (c) 2017 Juniper Networks, Inc. All rights reserved

heat_template_version: 2015-10-15

description: >
  HOT to deploy nested-openstack-kubernetes stack with Contrail networking

parameters:

  public_network_fqdn:
    type: string
    description: FQDN of the public network

  master_instance_name:
    type: string
    description: Name of the master instance

  master_ip_address:
    type: string
    description: IP address of the master instance

  slave_instance_name:
    type: string
    description: Name of the slave instance

  slave_ip_address:
    type: string
    description: IP address of the slave instance

  root_password:
    type: string
    description: Root password for the master/slave instances

  image_name:
    type: string
    description: Name of the image

  flavor_type:
    type: string
    description: Flavor type of the instance

resources:

  template_VirtualMachineInterface_Master:
    type: OS::ContrailV2::VirtualMachineInterface
    properties:
      name: { get_param: master_instance_name } 
      virtual_network_refs: [{ get_param: public_network_fqdn }]

  template_VirtualMachineInterface_Slave:
    type: OS::ContrailV2::VirtualMachineInterface
    properties:
      name: { get_param: slave_instance_name } 
      virtual_network_refs: [{ get_param: public_network_fqdn }]

  template_InstanceIp_Master:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ template_VirtualMachineInterface_Master ]
    properties:
      instance_ip_address: { get_param: master_ip_address }
      virtual_machine_interface_refs: [{ get_resource: template_VirtualMachineInterface_Master }]
      virtual_network_refs: [{ get_param: public_network_fqdn }]

  template_InstanceIp_Slave:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ template_VirtualMachineInterface_Slave ]
    properties:
      instance_ip_address: { get_param: slave_ip_address }
      virtual_machine_interface_refs: [{ get_resource: template_VirtualMachineInterface_Slave }]
      virtual_network_refs: [{ get_param: public_network_fqdn }]

  template_Instance_Master:
    type: OS::Nova::Server
    depends_on: [ template_InstanceIp_Master ]
    properties:
      name: { get_param: master_instance_name }
      image: { get_param: image_name }
      flavor: { get_param: flavor_type }
      networks:
        - port: { get_resource: template_VirtualMachineInterface_Master }
      user_data:
        str_replace:
          template: { get_file: scripts/init.sh }
          params:
            $master_ip: { get_param: master_ip_address }
            $slave_ip: { get_param: slave_ip_address }
            $master_hostname: { get_param: master_instance_name }
            $slave_hostname: { get_param: slave_instance_name }
            $root_password: { get_param: root_password }
      user_data_format: RAW

  template_Instance_Slave:
    type: OS::Nova::Server
    depends_on: [ template_InstanceIp_Slave ]
    properties:
      name: { get_param: slave_instance_name }
      image: { get_param: image_name }
      flavor: { get_param: flavor_type }
      networks:
        - port: { get_resource: template_VirtualMachineInterface_Slave }
      user_data:
        get_resource: template_BootStrap
      user_data_format: RAW

  template_BootStrap:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: { get_resource: template_CloudInit }

  template_CloudInit:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          template: { get_file: ../../cloud-init/init.sh }
          params:
            $master_ip: { get_param: master_ip_address }
            $slave_ip: { get_param: slave_ip_address }
            $master_hostname: { get_param: master_instance_name }
            $slave_hostname: { get_param: slave_instance_name }
            $root_password: { get_param: root_password }

outputs:

  master_instance_ip:
    description: Public IP of master instance
    value: { get_attr: [ template_Instance_Master, networks, { str_split: [':', { get_param: public_network_fqdn }, 2] }, 0 ] }

  slave_instance_ip:
    description: Public IP of slave instance
    value: { get_attr: [ template_Instance_Slave, networks, { str_split: [':', { get_param: public_network_fqdn }, 2] }, 0 ] }
